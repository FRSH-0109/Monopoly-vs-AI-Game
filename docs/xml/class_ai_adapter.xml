<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_ai_adapter" kind="class" language="C++" prot="public">
    <compoundname>AiAdapter</compoundname>
    <includes refid="_ai_adapter_8h" local="no">AiAdapter.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_ai_adapter_1a55774fef6cd9abcefee04cde591666fe" prot="private" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; AiAdapter::networkInputs_</definition>
        <argsstring></argsstring>
        <name>networkInputs_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vector storing the AI network inputs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="20" column="13" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ai_adapter_1a1cf8db1d4ee23ab10a45877850b60159" prot="private" static="no" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int AiAdapter::TURN</definition>
        <argsstring></argsstring>
        <name>TURN</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index for turn in network inputs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="21" column="24" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ai_adapter_1a6e1a680bc5ebeecc395c114e73aeb5ef" prot="private" static="no" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int AiAdapter::POS</definition>
        <argsstring></argsstring>
        <name>POS</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index for position in network inputs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="22" column="24" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ai_adapter_1a871ac4fdb62e9f4075b4aa1f32e43314" prot="private" static="no" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int AiAdapter::MONEY</definition>
        <argsstring></argsstring>
        <name>MONEY</name>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index for money in network inputs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="23" column="24" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ai_adapter_1a40cb87c298b67f3f53969ff9ed4dc31b" prot="private" static="no" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int AiAdapter::CARD</definition>
        <argsstring></argsstring>
        <name>CARD</name>
        <initializer>= 12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index for cards in network inputs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="24" column="24" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ai_adapter_1af5b46ac837587e024b4a0e8ecd4fcbe8" prot="private" static="no" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int AiAdapter::JAIL</definition>
        <argsstring></argsstring>
        <name>JAIL</name>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index for jail state in network inputs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="25" column="24" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ai_adapter_1ad514dc33651c6d3f5166d1a7bec557e7" prot="private" static="no" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int AiAdapter::OWNER</definition>
        <argsstring></argsstring>
        <name>OWNER</name>
        <initializer>= 20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index for property ownership in network inputs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="26" column="24" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ai_adapter_1acafd5cfefb8fac97843d4b59e7b655c3" prot="private" static="no" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int AiAdapter::MORT</definition>
        <argsstring></argsstring>
        <name>MORT</name>
        <initializer>= 48</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index for mortgage state in network inputs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="27" column="24" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ai_adapter_1a5a8ff8f44314a04c976ed2673d778524" prot="private" static="no" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int AiAdapter::HOUSE</definition>
        <argsstring></argsstring>
        <name>HOUSE</name>
        <initializer>= 76</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index for house state in network inputs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="28" column="24" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ai_adapter_1ad5e7571b99097ebab8aad05ab32f0428" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int AiAdapter::SELECT</definition>
        <argsstring></argsstring>
        <name>SELECT</name>
        <initializer>= 98</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index for selection in network inputs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="29" column="18" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ai_adapter_1affa5b93469a5d95b4408201764f83459" prot="private" static="no" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int AiAdapter::SELECT_MONEY</definition>
        <argsstring></argsstring>
        <name>SELECT_MONEY</name>
        <initializer>= 126</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index for selection money state in network inputs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="30" column="24" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ai_adapter_1a46c403835f0b4188e1e62f68e3844a15" prot="private" static="no" mutable="no">
        <type>const std::vector&lt; int &gt;</type>
        <definition>const std::vector&lt;int&gt; AiAdapter::PROPERTIES</definition>
        <argsstring></argsstring>
        <name>PROPERTIES</name>
        <initializer>= {-1, 0, -1, 1, -1, 2, 3, -1, 4, 5, -1, 6, 7, 8, 9, 10, 11, -1, 12, 13, -1, 14,
                                          -1, 15, 16, 17, 18, 19, 20, 21, -1, 22, 23, -1, 24, 25, -1, 26, -1, 27}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vector representing property states. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="32" column="19" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ai_adapter_1a03f028f596f56b8627bf3a0536979c3e" prot="private" static="no" mutable="no">
        <type>const std::vector&lt; int &gt;</type>
        <definition>const std::vector&lt;int&gt; AiAdapter::HOUSES</definition>
        <argsstring></argsstring>
        <name>HOUSES</name>
        <initializer>= {-1, 0, -1, 1, -1, -1, 2, -1, 3, 4, -1, 5, -1, 6, 7, -1, 8, -1, 9, 10, -1, 11, -1,
                                      12, 13, -1, 14, 15, -1, 16, -1, 17, 18, -1, 19, -1, -1, 20, -1, 21}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vector representing house states. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="34" column="23" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_ai_adapter_1a99a98174664d073aa341565e965cec08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>AiAdapter::AiAdapter</definition>
        <argsstring>()</argsstring>
        <name>AiAdapter</name>
        <briefdescription>
<para>Constructor for the <ref refid="class_ai_adapter" kindref="compound">AiAdapter</ref> class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="41" column="5" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="16" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1ac76618fcec497abb9b30456c39bb824a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; AiAdapter::getInputs</definition>
        <argsstring>()</argsstring>
        <name>getInputs</name>
        <briefdescription>
<para>Gets the AI network inputs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Vector of AI network inputs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="47" column="17" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="20" bodyend="22"/>
        <referencedby refid="class_ai_player_1affc4990f1252789326aa28a7797462ab" compoundref="_player_8cc" startline="735" endline="783">AiPlayer::decideAcceptTrade</referencedby>
        <referencedby refid="class_ai_player_1a441701de5fdaa5958fcc36e9791a9edc" compoundref="_player_8cc" startline="486" endline="520">AiPlayer::decideAuctionBid</referencedby>
        <referencedby refid="class_ai_player_1a94760240482130380840c0d303a19642" compoundref="_player_8cc" startline="522" endline="597">AiPlayer::decideBuildHouse</referencedby>
        <referencedby refid="class_ai_player_1a4ec346de3b8d48b157354452569ec266" compoundref="_player_8cc" startline="311" endline="363">AiPlayer::decideBuy</referencedby>
        <referencedby refid="class_ai_player_1add73dc5a5c94ac7afff1ee5be8fb7637" compoundref="_player_8cc" startline="365" endline="412">AiPlayer::decideJail</referencedby>
        <referencedby refid="class_ai_player_1ade144bf242d81cb7e0b4b714545ebeb9" compoundref="_player_8cc" startline="414" endline="447">AiPlayer::decideMortgage</referencedby>
        <referencedby refid="class_ai_player_1a84e084321dab6cea80ec5ea0f5564c02" compoundref="_player_8cc" startline="685" endline="733">AiPlayer::decideOfferTrade</referencedby>
        <referencedby refid="class_ai_player_1a141ea4b1a96050ae1ac1f6925c308135" compoundref="_player_8cc" startline="599" endline="683">AiPlayer::decideSellHouse</referencedby>
        <referencedby refid="class_ai_player_1ad37f0daac7f78c3179a6bd95da7c07af" compoundref="_player_8cc" startline="449" endline="484">AiPlayer::decideUnmortgage</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1a00bc5e6ed594a79e67736032d552ccf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double AiAdapter::convertMoney</definition>
        <argsstring>(unsigned int money)</argsstring>
        <name>convertMoney</name>
        <param>
          <type>unsigned int</type>
          <declname>money</declname>
        </param>
        <briefdescription>
<para>Converts money into a format suitable for AI input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>money</parametername>
</parameternamelist>
<parameterdescription>
<para>The money value to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted money value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="54" column="12" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="24" bodyend="28"/>
        <referencedby refid="class_ai_adapter_1adb20752fe0a0030069c6ff1fd8464f4a" compoundref="_ai_adapter_8cc" startline="103" endline="105">setMoney</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1a840ba14a6c65e4b7572ca9838b62c4f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double AiAdapter::convertMoneyValue</definition>
        <argsstring>(double value)</argsstring>
        <name>convertMoneyValue</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts money value into a format suitable for AI input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The money value to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted money value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="61" column="12" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="30" bodyend="32"/>
        <referencedby refid="class_ai_player_1a441701de5fdaa5958fcc36e9791a9edc" compoundref="_player_8cc" startline="486" endline="520">AiPlayer::decideAuctionBid</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1a0e0bbefc2b13cefab3ab2ccf16851bfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double AiAdapter::convertHouseValue</definition>
        <argsstring>(double value)</argsstring>
        <name>convertHouseValue</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts house value into a format suitable for AI input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The house value to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted house value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="68" column="12" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="34" bodyend="40"/>
        <referencedby refid="class_ai_player_1a94760240482130380840c0d303a19642" compoundref="_player_8cc" startline="522" endline="597">AiPlayer::decideBuildHouse</referencedby>
        <referencedby refid="class_ai_player_1a141ea4b1a96050ae1ac1f6925c308135" compoundref="_player_8cc" startline="599" endline="683">AiPlayer::decideSellHouse</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1a82fc215a8ade845e9d7e786364d65c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double AiAdapter::convertPosition</definition>
        <argsstring>(unsigned int position)</argsstring>
        <name>convertPosition</name>
        <param>
          <type>unsigned int</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Converts position into a format suitable for AI input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted position. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="75" column="12" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="42" bodyend="46"/>
        <referencedby refid="class_ai_adapter_1ad77b636dd77f7cec496a3cee56a62e78" compoundref="_ai_adapter_8cc" startline="99" endline="101">setPosition</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1a0629687775c5795afacc09ad37a18d09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double AiAdapter::convertCard</definition>
        <argsstring>(unsigned int cards)</argsstring>
        <name>convertCard</name>
        <param>
          <type>unsigned int</type>
          <declname>cards</declname>
        </param>
        <briefdescription>
<para>Converts card value into a format suitable for AI input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cards</parametername>
</parameternamelist>
<parameterdescription>
<para>The card value to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted card value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="82" column="12" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="48" bodyend="51"/>
        <referencedby refid="class_ai_adapter_1a70dc5b14b109ce0b77865676e804b6f6" compoundref="_ai_adapter_8cc" startline="107" endline="109">setCard</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1a10711aa34ec520301090d8d8d921acdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double AiAdapter::convertHouse</definition>
        <argsstring>(bool isHotel, unsigned int houseNumber)</argsstring>
        <name>convertHouse</name>
        <param>
          <type>bool</type>
          <declname>isHotel</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>houseNumber</declname>
        </param>
        <briefdescription>
<para>Converts house state into a format suitable for AI input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>isHotel</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating if it&apos;s a hotel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>houseNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>The house number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted house state. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="90" column="12" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="53" bodyend="61"/>
        <referencedby refid="class_ai_adapter_1a261820efa64eda05774ae3cafe20b460" compoundref="_ai_adapter_8cc" startline="125" endline="127">setHouse</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1a7b67096720f25f078235770a288360a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AiAdapter::setTurn</definition>
        <argsstring>(unsigned int index)</argsstring>
        <name>setTurn</name>
        <param>
          <type>unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Sets the turn for a given index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index for which to set the turn. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="96" column="10" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="63" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1a6993afbe81e3e8d5f94fb39ad932f80c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AiAdapter::setSelection</definition>
        <argsstring>(unsigned int index)</argsstring>
        <name>setSelection</name>
        <param>
          <type>unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Sets the selection for a given index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index for which to set the selection. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="102" column="10" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="75" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1aec456f7628cc0301d98584fb60216cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AiAdapter::setSelectionState</definition>
        <argsstring>(unsigned int index, int state)</argsstring>
        <name>setSelectionState</name>
        <param>
          <type>unsigned int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Sets the selection state for a given index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index for which to set the selection state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>The state to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="109" column="10" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1ab128b51a88ba6205c3aa30d790727363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AiAdapter::setMoneyContext</definition>
        <argsstring>(int state)</argsstring>
        <name>setMoneyContext</name>
        <param>
          <type>int</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Sets the money context state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>The state to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="115" column="10" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1a42eddc31ae4a6ead2f0ae64e6ab84b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AiAdapter::clearSelectionState</definition>
        <argsstring>()</argsstring>
        <name>clearSelectionState</name>
        <briefdescription>
<para>Clears the selection state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="120" column="10" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1ad77b636dd77f7cec496a3cee56a62e78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AiAdapter::setPosition</definition>
        <argsstring>(unsigned int index, unsigned int position)</argsstring>
        <name>setPosition</name>
        <param>
          <type>unsigned int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Sets the position for a given index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index for which to set the position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="127" column="10" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="99" bodyend="101"/>
        <references refid="class_ai_adapter_1a82fc215a8ade845e9d7e786364d65c73" compoundref="_ai_adapter_8cc" startline="42" endline="46">convertPosition</references>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1adb20752fe0a0030069c6ff1fd8464f4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AiAdapter::setMoney</definition>
        <argsstring>(unsigned int index, unsigned int money)</argsstring>
        <name>setMoney</name>
        <param>
          <type>unsigned int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>money</declname>
        </param>
        <briefdescription>
<para>Sets the money for a given index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index for which to set the money. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>money</parametername>
</parameternamelist>
<parameterdescription>
<para>The money to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="134" column="10" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="103" bodyend="105"/>
        <references refid="class_ai_adapter_1a00bc5e6ed594a79e67736032d552ccf6" compoundref="_ai_adapter_8cc" startline="24" endline="28">convertMoney</references>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1a70dc5b14b109ce0b77865676e804b6f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AiAdapter::setCard</definition>
        <argsstring>(unsigned int index, unsigned int cards)</argsstring>
        <name>setCard</name>
        <param>
          <type>unsigned int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>cards</declname>
        </param>
        <briefdescription>
<para>Sets the card for a given index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index for which to set the card. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cards</parametername>
</parameternamelist>
<parameterdescription>
<para>The card to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="141" column="10" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="107" bodyend="109"/>
        <references refid="class_ai_adapter_1a0629687775c5795afacc09ad37a18d09" compoundref="_ai_adapter_8cc" startline="48" endline="51">convertCard</references>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1a99a38f215b9c4244e2db1ddc7f2466d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AiAdapter::setJail</definition>
        <argsstring>(unsigned int index, unsigned int state)</argsstring>
        <name>setJail</name>
        <param>
          <type>unsigned int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Sets the jail state for a given index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index for which to set the jail state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>The state to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="148" column="10" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1a5c1c7ba8e34cabe430825dd185beb547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AiAdapter::setOwner</definition>
        <argsstring>(unsigned int property, unsigned int state)</argsstring>
        <name>setOwner</name>
        <param>
          <type>unsigned int</type>
          <declname>property</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Sets the owner state for a given property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property</parametername>
</parameternamelist>
<parameterdescription>
<para>The property for which to set the owner state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>The state to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="155" column="10" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="115" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1a266f351cf8ecd0aa00943068b7357bc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AiAdapter::setMortgage</definition>
        <argsstring>(unsigned int property, unsigned int state)</argsstring>
        <name>setMortgage</name>
        <param>
          <type>unsigned int</type>
          <declname>property</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Sets the mortgage state for a given property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property</parametername>
</parameternamelist>
<parameterdescription>
<para>The property for which to set the mortgage state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>The state to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="162" column="10" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="class_ai_adapter_1a261820efa64eda05774ae3cafe20b460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AiAdapter::setHouse</definition>
        <argsstring>(bool isHotel, unsigned int houseNumber, unsigned int id)</argsstring>
        <name>setHouse</name>
        <param>
          <type>bool</type>
          <declname>isHotel</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>houseNumber</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Sets the house state for a given house. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>isHotel</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating if it&apos;s a hotel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>houseNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>The house number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="170" column="10" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.cc" bodystart="125" bodyend="127"/>
        <references refid="class_ai_adapter_1a10711aa34ec520301090d8d8d921acdd" compoundref="_ai_adapter_8cc" startline="53" endline="61">convertHouse</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents an adapter for AI input data. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/kamil/zpr/Monopoly/AiAdapter.h" line="19" column="1" bodyfile="/home/kamil/zpr/Monopoly/AiAdapter.h" bodystart="19" bodyend="171"/>
    <listofallmembers>
      <member refid="class_ai_adapter_1a99a98174664d073aa341565e965cec08" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>AiAdapter</name></member>
      <member refid="class_ai_adapter_1a40cb87c298b67f3f53969ff9ed4dc31b" prot="private" virt="non-virtual"><scope>AiAdapter</scope><name>CARD</name></member>
      <member refid="class_ai_adapter_1a42eddc31ae4a6ead2f0ae64e6ab84b3f" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>clearSelectionState</name></member>
      <member refid="class_ai_adapter_1a0629687775c5795afacc09ad37a18d09" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>convertCard</name></member>
      <member refid="class_ai_adapter_1a10711aa34ec520301090d8d8d921acdd" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>convertHouse</name></member>
      <member refid="class_ai_adapter_1a0e0bbefc2b13cefab3ab2ccf16851bfe" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>convertHouseValue</name></member>
      <member refid="class_ai_adapter_1a00bc5e6ed594a79e67736032d552ccf6" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>convertMoney</name></member>
      <member refid="class_ai_adapter_1a840ba14a6c65e4b7572ca9838b62c4f7" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>convertMoneyValue</name></member>
      <member refid="class_ai_adapter_1a82fc215a8ade845e9d7e786364d65c73" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>convertPosition</name></member>
      <member refid="class_ai_adapter_1ac76618fcec497abb9b30456c39bb824a" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>getInputs</name></member>
      <member refid="class_ai_adapter_1a5a8ff8f44314a04c976ed2673d778524" prot="private" virt="non-virtual"><scope>AiAdapter</scope><name>HOUSE</name></member>
      <member refid="class_ai_adapter_1a03f028f596f56b8627bf3a0536979c3e" prot="private" virt="non-virtual"><scope>AiAdapter</scope><name>HOUSES</name></member>
      <member refid="class_ai_adapter_1af5b46ac837587e024b4a0e8ecd4fcbe8" prot="private" virt="non-virtual"><scope>AiAdapter</scope><name>JAIL</name></member>
      <member refid="class_ai_adapter_1a871ac4fdb62e9f4075b4aa1f32e43314" prot="private" virt="non-virtual"><scope>AiAdapter</scope><name>MONEY</name></member>
      <member refid="class_ai_adapter_1acafd5cfefb8fac97843d4b59e7b655c3" prot="private" virt="non-virtual"><scope>AiAdapter</scope><name>MORT</name></member>
      <member refid="class_ai_adapter_1a55774fef6cd9abcefee04cde591666fe" prot="private" virt="non-virtual"><scope>AiAdapter</scope><name>networkInputs_</name></member>
      <member refid="class_ai_adapter_1ad514dc33651c6d3f5166d1a7bec557e7" prot="private" virt="non-virtual"><scope>AiAdapter</scope><name>OWNER</name></member>
      <member refid="class_ai_adapter_1a6e1a680bc5ebeecc395c114e73aeb5ef" prot="private" virt="non-virtual"><scope>AiAdapter</scope><name>POS</name></member>
      <member refid="class_ai_adapter_1a46c403835f0b4188e1e62f68e3844a15" prot="private" virt="non-virtual"><scope>AiAdapter</scope><name>PROPERTIES</name></member>
      <member refid="class_ai_adapter_1ad5e7571b99097ebab8aad05ab32f0428" prot="private" virt="non-virtual"><scope>AiAdapter</scope><name>SELECT</name></member>
      <member refid="class_ai_adapter_1affa5b93469a5d95b4408201764f83459" prot="private" virt="non-virtual"><scope>AiAdapter</scope><name>SELECT_MONEY</name></member>
      <member refid="class_ai_adapter_1a70dc5b14b109ce0b77865676e804b6f6" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>setCard</name></member>
      <member refid="class_ai_adapter_1a261820efa64eda05774ae3cafe20b460" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>setHouse</name></member>
      <member refid="class_ai_adapter_1a99a38f215b9c4244e2db1ddc7f2466d1" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>setJail</name></member>
      <member refid="class_ai_adapter_1adb20752fe0a0030069c6ff1fd8464f4a" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>setMoney</name></member>
      <member refid="class_ai_adapter_1ab128b51a88ba6205c3aa30d790727363" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>setMoneyContext</name></member>
      <member refid="class_ai_adapter_1a266f351cf8ecd0aa00943068b7357bc8" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>setMortgage</name></member>
      <member refid="class_ai_adapter_1a5c1c7ba8e34cabe430825dd185beb547" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>setOwner</name></member>
      <member refid="class_ai_adapter_1ad77b636dd77f7cec496a3cee56a62e78" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>setPosition</name></member>
      <member refid="class_ai_adapter_1a6993afbe81e3e8d5f94fb39ad932f80c" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>setSelection</name></member>
      <member refid="class_ai_adapter_1aec456f7628cc0301d98584fb60216cbd" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>setSelectionState</name></member>
      <member refid="class_ai_adapter_1a7b67096720f25f078235770a288360a9" prot="public" virt="non-virtual"><scope>AiAdapter</scope><name>setTurn</name></member>
      <member refid="class_ai_adapter_1a1cf8db1d4ee23ab10a45877850b60159" prot="private" virt="non-virtual"><scope>AiAdapter</scope><name>TURN</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
