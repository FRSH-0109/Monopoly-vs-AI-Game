<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_notification_wall_8h" kind="file" language="C++">
    <compoundname>NotificationWall.h</compoundname>
    <includes local="no">SFML/Graphics.hpp</includes>
    <includes local="no">iostream</includes>
    <includes local="no">memory</includes>
    <includes local="no">vector</includes>
    <includedby refid="_monopoly_game_engine_8h" local="yes">/home/kamil/zpr/Monopoly/MonopolyGameEngine.h</includedby>
    <includedby refid="_notification_wall_8cc" local="yes">/home/kamil/zpr/Monopoly/NotificationWall.cc</includedby>
    <incdepgraph>
      <node id="2">
        <label>SFML/Graphics.hpp</label>
      </node>
      <node id="1">
        <label>/home/kamil/zpr/Monopoly/NotificationWall.h</label>
        <link refid="_notification_wall_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>/home/kamil/zpr/Monopoly/MonopolyGameEngine.cc</label>
        <link refid="_monopoly_game_engine_8cc"/>
      </node>
      <node id="3">
        <label>/home/kamil/zpr/Monopoly/GameScreen.h</label>
        <link refid="_game_screen_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/kamil/zpr/Monopoly/NotificationWall.h</label>
        <link refid="_notification_wall_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/kamil/zpr/Monopoly/GameEngine.h</label>
        <link refid="_game_engine_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/kamil/zpr/Monopoly/GameEngine.cc</label>
        <link refid="_game_engine_8cc"/>
      </node>
      <node id="6">
        <label>/home/kamil/zpr/Monopoly/main.cc</label>
        <link refid="main_8cc"/>
      </node>
      <node id="2">
        <label>/home/kamil/zpr/Monopoly/MonopolyGameEngine.h</label>
        <link refid="_monopoly_game_engine_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/home/kamil/zpr/Monopoly/NotificationWall.cc</label>
        <link refid="_notification_wall_8cc"/>
      </node>
      <node id="7">
        <label>/home/kamil/zpr/Monopoly/GameScreen.cc</label>
        <link refid="_game_screen_8cc"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_notification_wall" prot="public">NotificationWall</innerclass>
    <briefdescription>
<para>Header file for the <ref refid="class_notification_wall" kindref="compound">NotificationWall</ref> class. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="class_notification_wall" kindref="compound">NotificationWall</ref> class is used to display a list of messages/notifications as a finite list with a certain length. It automatically rolls over when it receives the next message.</para>
<para><simplesect kind="author"><para>Kamil Kosnik, Kacper Radzikowski </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTIFICATION_WALL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTIFICATION_WALL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SFML/Graphics.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="class_notification_wall" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_notification_wall" kindref="compound">NotificationWall</ref><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAX_NOTIFICATIONS_<sp/>=<sp/>15;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>sf::Vector2f<sp/>DRAW_OFFSET_<sp/>=<sp/>sf::Vector2f(200,<sp/>200);<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Y_STEP_OFFSET_<sp/>=<sp/>25;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;sf::Text&gt;&gt;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wall_texts_;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FONT_SIZE_<sp/>=<sp/>25;<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>sf::Font<sp/>font_;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_notification_wall_1a3ccb93b8fa08c067479db1c6bf8f2cac" kindref="member">NotificationWall</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_notification_wall_1ae2f70a86d938bd130180d2e76079bcaf" kindref="member">clearWall</ref>();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;sf::Text&gt;&gt;&amp;<sp/><ref refid="class_notification_wall_1a0dad79435cd7be0f9f20619172a7e168" kindref="member">getWall</ref>();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_notification_wall_1aa855b921732d7cffe8c8388d30ead116" kindref="member">addToWall</ref>(std::string<sp/>text);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_notification_wall_1a168674a90c0e91e98f7535215c06c05c" kindref="member">getFontSize</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_notification_wall_1a775496e213b1559aa63119829f5fe914" kindref="member">setFont</ref>(sf::Font<sp/>font);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>sf::Font&amp;<sp/><ref refid="class_notification_wall_1aef1f5f7372c584354e1617c63bdee7cd" kindref="member">getFont</ref>();</highlight></codeline>
<codeline lineno="74"><highlight class="normal">};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/kamil/zpr/Monopoly/NotificationWall.h"/>
  </compounddef>
</doxygen>
