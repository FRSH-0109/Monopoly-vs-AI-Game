<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_notification_wall_8cc" kind="file" language="C++">
    <compoundname>NotificationWall.cc</compoundname>
    <includes refid="_notification_wall_8h" local="yes">NotificationWall.h</includes>
    <incdepgraph>
      <node id="3">
        <label>SFML/Graphics.hpp</label>
      </node>
      <node id="2">
        <label>NotificationWall.h</label>
        <link refid="_notification_wall_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="1">
        <label>/home/kamil/zpr/Monopoly/NotificationWall.cc</label>
        <link refid="_notification_wall_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
    </incdepgraph>
    <briefdescription>
<para>Source file for the <ref refid="class_notification_wall" kindref="compound">NotificationWall</ref> class. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="class_notification_wall" kindref="compound">NotificationWall</ref> class is used to display a list of messages/notifications as a finite list with a certain length. It automatically rolls over when it receives the next message.</para>
<para><simplesect kind="author"><para>Kamil Kosnik, Kacper Radzikowski </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_notification_wall_8h" kindref="compound">NotificationWall.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NotificationWall<sp/>Class<sp/>Implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="class_notification_wall_1a3ccb93b8fa08c067479db1c6bf8f2cac" refkind="member"><highlight class="normal"><ref refid="class_notification_wall_1a3ccb93b8fa08c067479db1c6bf8f2cac" kindref="member">NotificationWall::NotificationWall</ref>()<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_notification_wall_1ae2f70a86d938bd130180d2e76079bcaf" kindref="member">clearWall</ref>();</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_notification_wall_1aef1f5f7372c584354e1617c63bdee7cd" kindref="member">getFont</ref>().loadFromFile(</highlight><highlight class="stringliteral">&quot;textures_and_fonts/fonts/Kabel-Heavy.otf&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Font<sp/>not<sp/>found!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_notification_wall_1a775496e213b1559aa63119829f5fe914" kindref="member">setFont</ref>(<ref refid="class_notification_wall_1aef1f5f7372c584354e1617c63bdee7cd" kindref="member">getFont</ref>());</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="class_notification_wall_1ae2f70a86d938bd130180d2e76079bcaf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_notification_wall_1ae2f70a86d938bd130180d2e76079bcaf" kindref="member">NotificationWall::clearWall</ref>()<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>wall_texts_.clear();</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="class_notification_wall_1a0dad79435cd7be0f9f20619172a7e168" refkind="member"><highlight class="normal">std::vector&lt;std::shared_ptr&lt;sf::Text&gt;&gt;&amp;<sp/><ref refid="class_notification_wall_1a0dad79435cd7be0f9f20619172a7e168" kindref="member">NotificationWall::getWall</ref>()<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wall_texts_;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="class_notification_wall_1aa855b921732d7cffe8c8388d30ead116" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_notification_wall_1aa855b921732d7cffe8c8388d30ead116" kindref="member">NotificationWall::addToWall</ref>(std::string<sp/>text)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;sf::Text&gt;<sp/>new_noti(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>sf::Text(text,<sp/><ref refid="class_notification_wall_1aef1f5f7372c584354e1617c63bdee7cd" kindref="member">getFont</ref>(),<sp/><ref refid="class_notification_wall_1a168674a90c0e91e98f7535215c06c05c" kindref="member">getFontSize</ref>()<sp/>-<sp/>2));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>new_noti-&gt;setFillColor(sf::Color::Black);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>wall_texts_.push_back(new_noti);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wall_texts_.size()<sp/>&gt;<sp/>MAX_NOTIFICATIONS_)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wall_texts_.erase(wall_texts_.begin());</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>noti_text_ptr<sp/>:<sp/>wall_texts_)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noti_text_ptr-&gt;setPosition(sf::Vector2f(DRAW_OFFSET_.x,<sp/>DRAW_OFFSET_.y<sp/>+<sp/>Y_STEP_OFFSET_<sp/>*<sp/>i));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="class_notification_wall_1a168674a90c0e91e98f7535215c06c05c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_notification_wall_1a168674a90c0e91e98f7535215c06c05c" kindref="member">NotificationWall::getFontSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FONT_SIZE_;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="class_notification_wall_1a775496e213b1559aa63119829f5fe914" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_notification_wall_1a775496e213b1559aa63119829f5fe914" kindref="member">NotificationWall::setFont</ref>(sf::Font<sp/>font)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>font_<sp/>=<sp/>font;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="class_notification_wall_1aef1f5f7372c584354e1617c63bdee7cd" refkind="member"><highlight class="normal">sf::Font&amp;<sp/><ref refid="class_notification_wall_1aef1f5f7372c584354e1617c63bdee7cd" kindref="member">NotificationWall::getFont</ref>()<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>font_;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/kamil/zpr/Monopoly/NotificationWall.cc"/>
  </compounddef>
</doxygen>
