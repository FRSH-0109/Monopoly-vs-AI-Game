<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_tinyann_8h" kind="file" language="C++">
    <compoundname>Tinyann.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">array</includes>
    <includes local="no">cmath</includes>
    <includes local="no">fstream</includes>
    <includes local="no">iostream</includes>
    <includes local="no">stack</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">vector</includes>
    <includes refid="_tinyneat_8h" local="yes">Tinyneat.h</includes>
    <includedby refid="_player_8h" local="yes">/home/kamil/zpr/Monopoly/Player.h</includedby>
    <includedby refid="_tinyann_8cc" local="yes">/home/kamil/zpr/Monopoly/Tinyann.cc</includedby>
    <incdepgraph>
      <node id="11">
        <label>list</label>
      </node>
      <node id="13">
        <label>queue</label>
      </node>
      <node id="10">
        <label>Tinyneat.h</label>
        <link refid="_tinyneat_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="12">
        <label>map</label>
      </node>
      <node id="5">
        <label>fstream</label>
      </node>
      <node id="14">
        <label>random</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="7">
        <label>stack</label>
      </node>
      <node id="3">
        <label>array</label>
      </node>
      <node id="1">
        <label>/home/kamil/zpr/Monopoly/Tinyann.h</label>
        <link refid="_tinyann_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>iostream</label>
      </node>
      <node id="8">
        <label>unordered_map</label>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>/home/kamil/zpr/Monopoly/ActiveScreen.cc</label>
        <link refid="_active_screen_8cc"/>
      </node>
      <node id="11">
        <label>/home/kamil/zpr/Monopoly/MonopolyGameEngine.cc</label>
        <link refid="_monopoly_game_engine_8cc"/>
      </node>
      <node id="8">
        <label>/home/kamil/zpr/Monopoly/GameScreen.h</label>
        <link refid="_game_screen_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/kamil/zpr/Monopoly/GameEngine.h</label>
        <link refid="_game_engine_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/kamil/zpr/Monopoly/ActiveScreen.h</label>
        <link refid="_active_screen_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>/home/kamil/zpr/Monopoly/Withdraw.h</label>
        <link refid="_withdraw_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>/home/kamil/zpr/Monopoly/Board.h</label>
        <link refid="_board_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/kamil/zpr/Monopoly/GameEngine.cc</label>
        <link refid="_game_engine_8cc"/>
      </node>
      <node id="2">
        <label>/home/kamil/zpr/Monopoly/Player.h</label>
        <link refid="_player_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/kamil/zpr/Monopoly/main.cc</label>
        <link refid="main_8cc"/>
      </node>
      <node id="12">
        <label>/home/kamil/zpr/Monopoly/Field.h</label>
        <link refid="_field_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/kamil/zpr/Monopoly/Tinyann.h</label>
        <link refid="_tinyann_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>/home/kamil/zpr/Monopoly/Field.cc</label>
        <link refid="_field_8cc"/>
      </node>
      <node id="10">
        <label>/home/kamil/zpr/Monopoly/MonopolyGameEngine.h</label>
        <link refid="_monopoly_game_engine_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>/home/kamil/zpr/Monopoly/Board.cc</label>
        <link refid="_board_8cc"/>
      </node>
      <node id="18">
        <label>/home/kamil/zpr/Monopoly/Player.cc</label>
        <link refid="_player_8cc"/>
      </node>
      <node id="19">
        <label>/home/kamil/zpr/Monopoly/Tinyann.cc</label>
        <link refid="_tinyann_8cc"/>
      </node>
      <node id="9">
        <label>/home/kamil/zpr/Monopoly/GameScreen.cc</label>
        <link refid="_game_screen_8cc"/>
      </node>
      <node id="16">
        <label>/home/kamil/zpr/Monopoly/Withdraw.cc</label>
        <link refid="_withdraw_8cc"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classann_1_1neuron" prot="public">ann::neuron</innerclass>
    <innerclass refid="classann_1_1neuralnet" prot="public">ann::neuralnet</innerclass>
    <innernamespace refid="namespaceann">ann</innernamespace>
    <briefdescription>
<para>Header file for AI implementation of tiny library from github user hav4ik, repository: <ulink url="https://github.com/hav4ik/tinyai">https://github.com/hav4ik/tinyai</ulink>. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>hav4ik </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_ARTIFICIAL_NEURAL_NETWORK_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_ARTIFICIAL_NEURAL_NETWORK_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stack&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_tinyneat_8h" kindref="compound">Tinyneat.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="namespaceann" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceann" kindref="compound">ann</ref><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="namespaceann_1a2bc6262d836cadb5144e9f2ab25a7330a297553fb4a215cc42626d9eee9196880" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="namespaceann_1a2bc6262d836cadb5144e9f2ab25a7330" kindref="member">type</ref><sp/>{<sp/><ref refid="namespaceann_1a2bc6262d836cadb5144e9f2ab25a7330adb0340ee3e7f4110ed74767bef668989" kindref="member">RECURRENT</ref>,<sp/><ref refid="namespaceann_1a2bc6262d836cadb5144e9f2ab25a7330a297553fb4a215cc42626d9eee9196880" kindref="member">NON_RECURRENT</ref><sp/>};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="classann_1_1neuron" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classann_1_1neuron" kindref="compound">neuron</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="31" refid="classann_1_1neuron_1aabb42bdb443921bc5eb1f132d3d9d5aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceann_1a2bc6262d836cadb5144e9f2ab25a7330" kindref="member">type</ref><sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>=<sp/>ordinal,<sp/>1<sp/>=<sp/>input,<sp/>2<sp/>=<sp/>output,<sp/>3<sp/>=<sp/>bias</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="classann_1_1neuron_1a0b6b6472402523a9c87e3a6e2afa6b5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classann_1_1neuron_1a0b6b6472402523a9c87e3a6e2afa6b5a" kindref="member">value</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="33" refid="classann_1_1neuron_1a921b38cf47c642db2d8db2b6e0514c77" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classann_1_1neuron_1a921b38cf47c642db2d8db2b6e0514c77" kindref="member">visited</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34" refid="classann_1_1neuron_1aaa89c9870e47b5a3d7ff99e3de9f92c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;size_t,<sp/>double&gt;&gt;<sp/><ref refid="classann_1_1neuron_1aaa89c9870e47b5a3d7ff99e3de9f92c0" kindref="member">in_nodes</ref>;</highlight></codeline>
<codeline lineno="35" refid="classann_1_1neuron_1a95d87bcdd37a8acf5653044cf1160d3b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classann_1_1neuron_1a95d87bcdd37a8acf5653044cf1160d3b" kindref="member">neuron</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="36" refid="classann_1_1neuron_1a991c1fe3e5d307ce411442a3577ce137" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classann_1_1neuron_1a991c1fe3e5d307ce411442a3577ce137" kindref="member">~neuron</ref>()<sp/>{<sp/><ref refid="classann_1_1neuron_1aaa89c9870e47b5a3d7ff99e3de9f92c0" kindref="member">in_nodes</ref>.clear();<sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal">};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="classann_1_1neuralnet" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classann_1_1neuralnet" kindref="compound">neuralnet</ref><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;neuron&gt;<sp/>nodes;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recurrent<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/>input_nodes;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/>bias_nodes;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/>output_nodes;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sigmoid(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>evaluate_nonrecurrent(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>input,<sp/>std::vector&lt;double&gt;&amp;<sp/>output);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>evaluate_recurrent(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>input,<sp/>std::vector&lt;double&gt;&amp;<sp/>output);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classann_1_1neuralnet_1aadcc3e0659c327b2dc79eca2917f8524" kindref="member">neuralnet</ref>();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classann_1_1neuralnet_1a0ae44c22c152757053aebcaa70f5f8bf" kindref="member">from_genome</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classneat_1_1genome" kindref="compound">neat::genome</ref>&amp;<sp/>a);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classann_1_1neuralnet_1af6ea7c4bc68dbd966cc80a63a6a3519d" kindref="member">evaluate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>input,<sp/>std::vector&lt;double&gt;&amp;<sp/>output);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classann_1_1neuralnet_1aafc20f4edec46ac91452f5bb97152ebe" kindref="member">import_fromfile</ref>(std::string<sp/>filename);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classann_1_1neuralnet_1ab06c14a353b59733365443f36dd40a37" kindref="member">export_tofile</ref>(std::string<sp/>filename);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>namespace<sp/>ann</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/kamil/zpr/Monopoly/Tinyann.h"/>
  </compounddef>
</doxygen>
